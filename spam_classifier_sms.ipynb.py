# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XXJ7tRdq9F4AlciGXth0pDtIBVt2-LWi
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd

# Load Dataset
data = pd.read_csv('spam.csv', encoding='latin-1')[['v1', 'v2']]
data.columns = ['label', 'text']

print(data.head())
print(data['label'].value_counts())

# Convert 'ham' to 0 and 'spam' to 1
data['label'] = data['label'].map({'ham': 0, 'spam': 1})

# Check conversion
print(data.head())
print(data['label'].value_counts())

from sklearn.model_selection import train_test_split

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(
    data['text'], data['label'], test_size=0.2, random_state=42
)

# Check the size of each set
print("Training size:", len(X_train))
print("Test size:", len(X_test))

"""TF-IDF (Term Frequency–Inverse Document Frequency) converts text into numbers based on how important a word is in a message compared to all messages.
Words like “free,” “win,” or “money” might get higher scores in spam messages.
"""

from sklearn.feature_extraction.text import TfidfVectorizer

# Initialize the TF-IDF Vectorizer (removes common stopwords)
vectorizer = TfidfVectorizer(stop_words='english')

# Learn from training data and transform
X_train_vec = vectorizer.fit_transform(X_train)

# Only transform test data (don’t fit again!)
X_test_vec = vectorizer.transform(X_test)

# Optional: Check vector shape
print("Vectorized training data shape:", X_train_vec.shape)

"""Naive Bayes?
It’s a simple and fast classification algorithm based on probability. It assumes each word is independent of the others (hence "naive"). Despite that, it's very effective for spam detection.
"""

from sklearn.naive_bayes import MultinomialNB

# Initialize the model
model = MultinomialNB()

# Train the model with the vectorized training data
model.fit(X_train_vec, y_train)

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Predict on the test data
y_pred = model.predict(X_test_vec)

# Accuracy
print("Accuracy:", accuracy_score(y_test, y_pred))

# Confusion Matrix
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

# Detailed Report
print("Classification Report:\n", classification_report(y_test, y_pred))

# 7. Predict on custom input
custom_msg = ["Hey, just checking if you’re free for coffee tomorrow?"]
custom_vec = vectorizer.transform(custom_msg)
prediction = model.predict(custom_vec)
print("Prediction:", "Spam" if prediction[0] == 1 else "Not Spam")

custom_msg = ["Hi, this is a reminder for your payment. Click the link to proceed."]
custom_vec = vectorizer.transform(custom_msg)
prediction = model.predict(custom_vec)
print("Prediction:", "Spam" if prediction[0] == 1 else "Not Spam")

# 7. Predict on custom input
custom_custom_msg = ["URGENT: You have won a lottery! Reply WIN to claim now."]
custom_vec = vectorizer.transform(custom_msg)
prediction = model.predict(custom_vec)
print("Prediction:", "Spam" if prediction[0] == 1 else "Not Spam")

while True:
    user_input = input("\nEnter a message to check (or type 'exit' to quit): ")
    if user_input.lower() == 'exit':
        break
    user_vec = vectorizer.transform([user_input])
    prediction = model.predict(user_vec)
    print("Prediction:", "Spam" if prediction[0] == 1 else "Not Spam")

